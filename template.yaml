AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for test-task

Parameters:
  CodeUriBucket:
    Type: String
  CodeUriKey:
    Type: String

Resources:

# === BEGIN Permissions ===
  TestTaskLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: TestTaskLambdaFunctionLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: TestTaskLambdaFunctionDynamoDbPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"
# === END Permissions ===

# === BEGIN Database ===
  TestTaskTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: test-task-table
      AttributeDefinitions:
        - AttributeName: recordId
          AttributeType: S
        - AttributeName: orgId
          AttributeType: S
      KeySchema:
        - AttributeName: recordId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: orgIdIndex
          KeySchema:
            - AttributeName: orgId
              KeyType: HASH
          Projection:
            ProjectionType: KEYS_ONLY
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
# === END Database ===

# === BEGIN Lambdas ===
  TestTaskCreateRecord:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt 'TestTaskLambdaFunctionRole.Arn'
      CodeUri:
        Bucket: !Ref CodeUriBucket
        Key: !Ref CodeUriKey
      Handler: TestTaskCreateRecord::handleRequest
      Runtime: java17
      Architectures:
        - x86_64
      MemorySize: 256
      Timeout: 60

  TestTaskGetItem:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt 'TestTaskLambdaFunctionRole.Arn'
      CodeUri:
        Bucket: !Ref CodeUriBucket
        Key: !Ref CodeUriKey
      Handler: TestTaskGetItem::handleRequest
      Runtime: java17
      Architectures:
        - x86_64
      MemorySize: 256
      Timeout: 60

  TestTaskGetRecords:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt 'TestTaskLambdaFunctionRole.Arn'
      CodeUri:
        Bucket: !Ref CodeUriBucket
        Key: !Ref CodeUriKey
      Handler: TestTaskGetRecords::handleRequest
      Runtime: java17
      Architectures:
        - x86_64
      MemorySize: 256
      Timeout: 60
# === END Lambdas ===

# === BEGIN API GATEWAY ===
  TestTaskRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: test-task

  TestTaskResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt TestTaskRestApi.RootResourceId
      PathPart: 'test-task'
      RestApiId: !Ref TestTaskRestApi

  TestTaskGetItemResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref TestTaskResource
      PathPart: '{recordId}'
      RestApiId: !Ref TestTaskRestApi

  TestTaskOrgResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref TestTaskResource
      PathPart: 'org'
      RestApiId: !Ref TestTaskRestApi

  TestTaskGetByOrgIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref TestTaskOrgResource
      PathPart: '{orgId}'
      RestApiId: !Ref TestTaskRestApi

  TestTaskApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref TestTaskRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      RestApiId: !Ref TestTaskRestApi
      StageName: 'dev'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - TestTaskCreateRecordMethod
      - TestTaskGetRecordsMethod
      - TestTaskGetItemMethod
    Properties:
      RestApiId: !Ref TestTaskRestApi

  # Create item
  TestTaskCreateRecordMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      MethodResponses:
        - ResponseModels:
            application/json: !Ref TestTaskApiGatewayModel
          StatusCode: 200
      Integration:
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: |
            {
              "name" : $input.json('$.name'),
              "orgId" : $input.json('$.orgId')
            }
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':apigateway:'
            - !Ref AWS::Region
            - :lambda:path/2015-03-31/functions/
            - !GetAtt TestTaskCreateRecord.Arn
            - /invocations
      ResourceId: !Ref TestTaskResource
      RestApiId: !Ref TestTaskRestApi

  # Get items by orgId
  TestTaskGetRecordsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      MethodResponses:
        - ResponseModels:
            application/json: !Ref TestTaskApiGatewayModel
          StatusCode: 200
      Integration:
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: |
            {
              "orgId": "$input.params('orgId')"
            }
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':apigateway:'
            - !Ref AWS::Region
            - :lambda:path/2015-03-31/functions/
            - !GetAtt TestTaskGetRecords.Arn
            - /invocations
      ResourceId: !Ref TestTaskGetByOrgIdResource
      RestApiId: !Ref TestTaskRestApi

  # Get unique item by recordId
  TestTaskGetItemMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: |
            {
              "recordId" : "$input.params('recordId')"
            }
        IntegrationHttpMethod: POST
        Type: AWS
        Uri:
          !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':apigateway:'
            - !Ref AWS::Region
            - :lambda:path/2015-03-31/functions/
            - !GetAtt TestTaskGetItem.Arn
            - /invocations
      ResourceId: !Ref TestTaskGetItemResource
      RestApiId: !Ref TestTaskRestApi

  TestTaskApiGatewayCreateRecordPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TestTaskCreateRecord.Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Join
        - ''
        - - 'arn:'
          - !Ref AWS::Partition
          - ':execute-api:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref TestTaskRestApi
          - /*/*
  TestTaskApiGatewayGetItemPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TestTaskGetItem.Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Join
        - ''
        - - 'arn:'
          - !Ref AWS::Partition
          - ':execute-api:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref TestTaskRestApi
          - /*/*
  TestTaskApiGatewayGetRecordsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TestTaskGetRecords.Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Join
        - ''
        - - 'arn:'
          - !Ref AWS::Partition
          - ':execute-api:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref TestTaskRestApi
          - /*/*
# === END API GATEWAY ===

#####################################

Outputs:
  ApiUrl:
    Description: URL of the REST API.
    Value:
      Fn::Join:
        - ''
        - - https://
          - Ref: TestTaskRestApi
          - .execute-api.
          - Ref: AWS::Region
          - .
          - Ref: AWS::URLSuffix
          - /dev